<!-- <!DOCTYPE flight_plan SYSTEM "flight_plan.dtd"> -->
<!--
The goal of this flightplan is to have a safe, simple no-brainer flightplan for your first AR drone tryout flights.
It should be useable for UAS enthousiasts just starting in the field of autonomous AR Drone flights.
This flightplan should be kept as simple as possible and *not* to be extended with more functionality, if one needs that, plz use another flightplan.
-->
<flight_plan alt="10" ground_alt="0" lat0="48.360158" lon0="-4.570705" max_dist_from_home="30" name="ARDrone Basic" security_height="8">
  <header>
#include "autopilot.h"
#include "subsystems/ahrs.h"
#include "subsystems/electrical.h"
#include "subsystems/datalink/datalink.h"

  </header>
  <waypoints>
    <waypoint name="HOME" x="0.0" y="0.0"/>
    <waypoint name="_CLIMB" x="0.0" y="5.0"/>
    <waypoint name="Landingspot" x="5.0" y="5.0"/>
    <waypoint name="_TDEMERGENCY" x="-5.0" y="-5.0"/>
    <waypoint name="A" x="5" y="-10"/>
    <waypoint name="B" x="20" y="-30"/>
    <waypoint name="CIRCLE_CENTER" x="0.0" y="-0.4"/>
    
  </waypoints>
  <exceptions>
    <!-- Check if battery voltage is low, then try to go to block Land. This is deemed better than to land at that very spot since that can be above something unknown, 
    is less safe and has less chance of AC recovery. It states battery LOW, not battery critical -->
    <exception cond="electrical.bat_low &amp;&amp; !(nav_block == IndexOfBlock('Setting home location')) &amp;&amp; !(nav_block == IndexOfBlock('Holding point')) &amp;&amp; !(nav_block == IndexOfBlock('Land')) &amp;&amp; !(nav_block == IndexOfBlock('Emergency'))" deroute="Land"/>
    <exception cond="electrical.bat_critical &amp;&amp; !(nav_block == IndexOfBlock('Setting home location')) &amp;&amp; !(nav_block == IndexOfBlock('Holding point')) &amp;&amp; !(nav_block == IndexOfBlock('Land')) &amp;&amp; !(nav_block == IndexOfBlock('Emergency'))" deroute="Emergency"/>
    <!-- No connection for some time in flight, then try to land -->
    <exception cond="autopilot_in_flight &amp;&amp; datalink_time > 6 &amp;&amp; !(nav_block == IndexOfBlock('Setting home location')) &amp;&amp; !(nav_block == IndexOfBlock('Holding point')) &amp;&amp; !(nav_block == IndexOfBlock('Land')) &amp;&amp; !(nav_block == IndexOfBlock('Emergency'))" deroute="Land"/>
    <!-- If somehow the AC isVALUEVALUE higher than initial ground position plus 60m, just land -->
 <!--tofix only in flight   <exception cond="GetPosAlt() > (ground_alt + 60)" deroute="Land"/> -->
    <!-- No link for 20 seconds and no GPS valid position fix, but the AC can still hover...however no option to give commands, emergency landing -->
  <!--  <exception cond="And(datalink_time > 20, !GpsFixValid()) &amp;&amp; !(nav_block == IndexOfBlock('Setting home location')) &amp;&amp; !(nav_block == IndexOfBlock('Holding point')) &amp;&amp; !(nav_block == IndexOfBlock('Emergency'))" deroute="Emergency"/>-->
    <!-- Check if outside a safety circle from where the drone started the climb, if outside come back to where climb was started-->
    <exception cond="(((((WaypointX(WP__CLIMB)) - GetPosX())*((WaypointX(WP__CLIMB)) - GetPosX()))) + ((((WaypointY(WP__CLIMB)) - GetPosY())*((WaypointY(WP__CLIMB)) - GetPosY())))) > (MAX_DIST_FROM_HOME*MAX_DIST_FROM_HOME) &amp;&amp; !(nav_block == IndexOfBlock('Setting home location')) &amp;&amp; !(nav_block == IndexOfBlock('Holding point')) &amp;&amp; !(nav_block == IndexOfBlock('Land')) &amp;&amp; !(nav_block == IndexOfBlock('Emergency'))" deroute="Land"/>
  </exceptions>
  <blocks>
  
<!-- to test -->
<block name="Circle">
      <circle radius="nav_radius" wp="CIRCLE_CENTER"/>
    </block>  
  
  
    <block name="Setting home location"><!-- TODO make sure there is an indicator in simple layout of GCS screen displaying "Waiting for GPS fix..."-->
      <call fun="NavKillThrottle()"/>
<!-- if no valid fix or GPS accuracy > 15m or no AHRS , it a no-go, just wait-->
      <while cond="!GpsFixValid() || gps.pacc > 1800 || !(ahrs.status == AHRS_RUNNING)"/>
<!-- Additional wait to allow for better GPS data -->
      <while cond="LessThan(NavBlockTime(), 8)"/>
      <call fun="NavSetGroundReferenceHere()"/>
<!-- Set here, while setting theoretically GPS position can still jump, thus set in least needed precision order -->
      <call fun="NavSetAltitudeReferenceHere()"/>
      <call fun="NavSetWaypointHere(WP__TDEMERGENCY)"/>
      <call fun="NavSetWaypointHere(WP_Landingspot)"/>
<!-- ALTERNATIVE To make the naming better visible, move it aside a bit 
      <set var="waypoints[WP_Landingspot].x" value="WaypointX(WP_Landingspot) + 1"/>
      <set var="waypoints[WP_Landingspot].y" value="WaypointY(WP_Landingspot) + 5"/>
-->
      <call fun="NavSetWaypointHere(WP_HOME)"/>
      <call fun="NavSetWaypointHere(WP__CLIMB)"/>
    </block>
<!-- wait for take-off signal -->
    <block name="Holding point">
      <call fun="NavKillThrottle()"/>
      <attitude pitch="0" roll="0" throttle="0" vmode="throttle" until="FALSE"/>
    </block>
    <block key="t" name="Takeoff" strip_button="Takeoff" strip_icon="takeoff.png">
<!-- To make sure that even if aircraft was moved by e.g. walking with it to a different spot, the takeoff and landing position are still on that spot, home is allowed to be somewhere else. -->
      <call fun="NavSetAltitudeReferenceHere()"/>
      <call fun="NavSetWaypointHere(WP__CLIMB)"/>
      <call fun="NavSetWaypointHere(WP_Landingspot)"/>
      <set var="waypoints[WP_Landingspot].z" value="ground_alt"/><!-- Maybe to should be actual altitude?-->
      <call fun="NavResurrect()"/>
      <set value="0" var="kill_throttle"/>
      <call fun="NavResurrect()"/>
      <!-- TODO improve try takeof 5 time than give up an go to Holding point, something suck in the prop, a finger maybe ;)-->
      <!--   <exception cond="!autopilot_motors_on" deroute="Takeoff"/>-->
      <set value="0" var="autopilot_flight_time"/>    
      <!-- If take-off to first point takes to long to reach somehow because of some reason, abort flight -->
     <exception cond="block_time > 180" deroute="Land"/>
     <!-- To make sure that takoff is straight up to the height of first waypoint A, so no sideways take-off, since sideways movements starting at low height from takeoff can have nasty effects) -->
<!-- In real life aircraft can be blown sideways with strong wind TODO experiment with results of 2 stages 2 -->
<!-- TODO see if adding this 2nd stage is better -->
   <!--  <attitude pitch="0" roll="0" throttle="0.90" until="stage_time > 2" vmode="throttle"/>-->
<!--Alternative <exception cond="WaypointAlt(WP_A) > stateGetPositionEnu_f()->z" deroute="A_to_B_and_back"/>-->
     <stay vmode="climb" climb="0.8" until="WaypointAlt(WP_A) > stateGetPositionEnu_f()->z" wp="_CLIMB"/>
    </block>
<!-- The From A to B and back, The only one visible block so no GCS choices to toy around with, a non expert would get confused -->
    <block key="m" name="From A to B and back">
      <go wp="A"/>
      <go from="A" hmode="route" wp="B"/>
      <stay wp="B" until="stage_time > 3"/> <!-- Hang around for 3 seconds, any longer and people just starting get worried...-->
      <go from="B" hmode="route" wp="A"/>
      <!-- to make sure the route height to touchdown is high not lower than on the first takeoff-->
   <!-- TODO: discuss this behaviour since it will look strange if drone first will climb to climb point and not decend when one presses land, perception difference-->
      <deroute block="Land"/>
    </block>
<!-- A key combination to initiate a landing -->
    <block name="Land" key="l">
      <go wp="_CLIMB"/>
      <go wp="Landingspot"/>
      <exception cond="!nav_is_in_flight()" deroute="Holding point"/>
<!-- decend with 2ms while staying at same spot-->
      <stay climb="-2.0" vmode="climb" wp="Landingspot"/>
    </block>
<!-- To be able to react to the panic button. On throttle this works better if your battery is almost empty it will not try to throttle up creating a batt dip, and then a mainboard that would stop working -->
    <block name="Emergency" key="e" strip_button="Emergency" strip_icon="home_emergency.png">
   <!-- If landing would takes to long take drastic measures, kill everything -->
     <!-- <exception cond="Block_time > 50" value="1" var="kill_throttle"/>-->
      <call fun="NavSetWaypointHere(WP__TDEMERGENCY)"/>
      <exception cond="!nav_is_in_flight()" deroute="Holding point"/>
  <!--TODO add Detect landing with sonar if Ardrone2 after sonar  baro code mixing sourcecode is in master-->
      <stay wp="_TDEMERGENCY" throttle="0.50" vmode="throttle"/>
    </block>
  </blocks>
</flight_plan>
